plugins {
    id 'java'
    id 'idea'
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
    id 'com.modrinth.minotaur' version '2.+'
    id 'net.darkhax.curseforgegradle' version '1.1.24'
}

version = "${version}-forge"

base {
    archivesName = mod_id
}

minecraft {
    mappings channel: 'official', version: minecraft_version

    if (file('src/main/resources/META-INF/accesstransformer.cfg').exists()) {
        accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    }

    runs {
        client {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName 'Client'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                modClientRun {
                    source sourceSets.main
                    source project(":common").sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName 'Server'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                modServerRun {
                    source sourceSets.main
                    source project(":common").sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
            taskName 'Data'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                modDataRun {
                    source sourceSets.main
                    source project(":common").sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources.srcDir 'src/generated/resources'

dependencies {
    minecraft "net.minecraftforge:forge:${forge_version}"
    compileOnly project(":common")

    implementation fileTree(dir: 'libs', include: ['*.jar'])
}

tasks.withType(JavaCompile).configureEach {
    source(project(":common").sourceSets.main.allSource)
}

def resourceTargets = ['META-INF/mods.toml', 'META-INF/jarjar/metadata.json', 'pack.mcmeta']
def replaceProperties = [
        minecraft_version: minecraft_version, minecraft_version_range: forge_minecraft_version_range,
        forge_version: forge_version, forge_version_range: forge_version_range,
        loader_version_range: forge_loader_version_range,
        mod_id: mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: version,
        mod_author: mod_author, mod_description: mod_description,
        mod_url: mod_url, mod_issues: mod_issues, side: forge_side
]

processResources {
    inputs.properties replaceProperties
    replaceProperties.put 'project', project

    filesMatching(resourceTargets) {
        expand replaceProperties
    }
    exclude '**/data/c/**', '**/data/fabric/**'
    from project(":common").sourceSets.main.resources
}

jar {
    from('libs') {
        include '*.jar'
        into('META-INF/jarjar')
    }
}

jar.finalizedBy('reobfJar')

tasks.register('curseforge', net.darkhax.curseforgegradle.TaskPublishCurseForge) {
    apiToken = System.getenv("CURSEFORGE_TOKEN")
    def projectId = "883384"
    def main = upload(projectId, jar)
    main.displayName = "${mod_name} ${version}"
    main.releaseType = "release"
    main.addGameVersion("1.20.3", "1.20.4")
    main.addModLoader("Forge")
    main.changelog = rootProject.file("CHANGELOG.md")
    main.changelogType = "markdown"
    disableVersionDetection()
    group = "publishing"
}

modrinth {
    token = System.getenv("MODRINTH_TOKEN")
    projectId = "N56hoqkq"
    uploadFile = jar
    versionNumber = "${version}"
    versionName = "${mod_name} ${version}"
    versionType = "release"
    gameVersions = ["1.20.3", "1.20.4"]
    loaders = ["forge"]
    changelog = rootProject.file("CHANGELOG.md").text
    group = "publishing"
}

tasks.register('publish') {
    dependsOn 'curseforge', 'modrinth'
    group = "publishing"
}

["curseforge", "modrinth"].each { task ->
    tasks.named(task) {
        mustRunAfter(":fabric:$task")
    }
}