plugins {
    id 'idea'
    id 'java-library'
    id 'net.neoforged.gradle.userdev' version '7.0.82'
    id 'com.modrinth.minotaur' version '2.+'
    id 'net.darkhax.curseforgegradle' version '1.1.24'
}

version = "${version}-neoforge"

base {
    archivesName = mod_id
}

if (file('src/main/resources/META-INF/accesstransformer.cfg').exists()) {
    minecraft.accessTransformers.file file('src/main/resources/META-INF/accesstransformer.cfg')
}
runs {
    configureEach {
        modSource project.sourceSets.main
    }
    client {
        systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
    }
    server {
        systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        programArgument '--nogui'
    }
    gameTestServer {
        systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
    }
    data {
        programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
    }
}

sourceSets.main.resources.srcDir 'src/generated/resources'

dependencies {
    implementation "net.neoforged:neoforge:${neoforge_version}"
    compileOnly project(":common")

    implementation fileTree(dir: 'libs', include: ['*.jar'])
}

Spec<Task> notNeoTask = { Task it -> !it.name.startsWith("neo") } as Spec<Task>
tasks.withType(JavaCompile).matching(notNeoTask).configureEach {
    source(project(":common").sourceSets.main.allSource)
}
tasks.withType(Javadoc).matching(notNeoTask).configureEach {
    source(project(":common").sourceSets.main.allJava)
}

def resourceTargets = ['META-INF/mods.toml', 'META-INF/jarjar/metadata.json', 'pack.mcmeta']
def replaceProperties = [
        minecraft_version: minecraft_version, minecraft_version_range: neoforge_minecraft_version_range,
        neoforge_version: neoforge_version, neoforge_version_range: neoforge_version_range,
        loader_version_range: neoforge_loader_version_range,
        mod_id: mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: version,
        mod_author: mod_author, mod_description: mod_description,
        mod_url: mod_url, mod_issues: mod_issues, side: neoforge_side
]

processResources {
    inputs.properties replaceProperties
    replaceProperties.put 'project', project

    filesMatching(resourceTargets) {
        expand replaceProperties
    }
    exclude '**/data/c/**', '**/data/fabric/**'
    from project(":common").sourceSets.main.resources
}

jar {
    from('libs') {
        include '*.jar'
        into('META-INF/jarjar')
    }
}

tasks.register('curseforge', net.darkhax.curseforgegradle.TaskPublishCurseForge) {
    apiToken = System.getenv("CURSEFORGE_TOKEN")
    def projectId = "883384"
    def main = upload(projectId, jar)
    main.displayName = "${mod_name} ${version}"
    main.releaseType = "release"
    main.addGameVersion("1.20.3", "1.20.4")
    main.addModLoader("NeoForge")
    main.changelog = rootProject.file("CHANGELOG.md")
    main.changelogType = "markdown"
    disableVersionDetection()
    group = "publishing"
}

modrinth {
    token = System.getenv("MODRINTH_TOKEN")
    projectId = "N56hoqkq"
    uploadFile = jar
    versionNumber = "${version}"
    versionName = "${mod_name} ${version}"
    versionType = "release"
    gameVersions = ["1.20.3", "1.20.4"]
    loaders = ["neoforge"]
    changelog = rootProject.file("CHANGELOG.md").text
    group = "publishing"
}

tasks.register('publish') {
    dependsOn 'curseforge', 'modrinth'
    group = "publishing"
}

["curseforge", "modrinth"].each { task ->
    tasks.named(task) {
        mustRunAfter(":forge:$task")
    }
}