plugins {
    id 'java'
    id 'idea'
    id 'fabric-loom' version '1.5-SNAPSHOT'
    id 'com.modrinth.minotaur' version '2.+'
    id 'net.darkhax.curseforgegradle' version '1.1.24'
}

version = "${version}-fabric"

base {
    archivesName = mod_id
}

repositories {
    maven {
        name "modrinth"
        url "https://api.modrinth.com/maven"
    }
}

dependencies {
    minecraft "com.mojang:minecraft:${minecraft_version}"
    mappings loom.officialMojangMappings()
    modImplementation "net.fabricmc:fabric-loader:${fabric_loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${fabric_api_version}"
    implementation group: 'com.google.code.findbugs', name: 'jsr305', version: '3.0.1'
    compileOnly project(":common")

    modImplementation fileTree(dir: 'libs', include: ['*.jar'])
}

loom {
    if (file("src/main/resources/${mod_id}.aw").exists()) {
        accessWidenerPath.set(file("src/main/resources/${mod_id}.aw"))
    }
    mixin {
        defaultRefmapName.set("${mod_id}.refmap.json")
    }
    runs {
        client {
            client()
            setConfigName("Fabric Client")
            ideConfigGenerated(true)
            runDir("run")
        }
        server {
            server()
            setConfigName("Fabric Server")
            ideConfigGenerated(true)
            runDir("run")
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    source(project(":common").sourceSets.main.allSource)
}

def resourceTargets = ['fabric.mod.json']
def replaceProperties = [
        minecraft_version_range: fabric_minecraft_version_range,
        loader_version_range: fabric_loader_version_range,
        mod_id: mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: version,
        mod_author: mod_author, mod_description: mod_description,
        mod_url: mod_url, mod_issues: mod_issues, side: fabric_side,
        configlibtxf_version: configlibtxf_version
]

processResources {
    inputs.properties replaceProperties
    replaceProperties.put 'project', project

    filesMatching(resourceTargets) {
        expand replaceProperties
    }
    exclude '**/data/forge/**'
    from project(":common").sourceSets.main.resources
}

jar {
    from('libs') {
        include '*.jar'
        into('META-INF/jars')
    }
}

jar.finalizedBy('remapJar')

tasks.register('curseforge', net.darkhax.curseforgegradle.TaskPublishCurseForge) {
    apiToken = System.getenv("CURSEFORGE_TOKEN")
    def projectId = "883384"
    def main = upload(projectId, remapJar)
    main.displayName = "${mod_name} ${version}"
    main.releaseType = "beta"
    main.addGameVersion("1.19.4")
    main.addModLoader("Fabric", "Quilt")
    main.changelog = rootProject.file("CHANGELOG.md")
    main.changelogType = "markdown"
    disableVersionDetection()
    group = "publishing"
}

modrinth {
    token = System.getenv("MODRINTH_TOKEN")
    projectId = "N56hoqkq"
    uploadFile = remapJar
    versionNumber = "${version}"
    versionName = "${mod_name} ${version}"
    versionType = "beta"
    gameVersions = ["1.19.4"]
    loaders = ["fabric", "quilt"]
    changelog = rootProject.file("CHANGELOG.md").text
    group = "publishing"
}

tasks.register('publish') {
    dependsOn 'curseforge', 'modrinth'
    group = "publishing"
}